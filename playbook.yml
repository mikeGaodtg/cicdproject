---
- hosts: webservers
  become: yes
  vars:
    docker_packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io

  tasks:
    - name: Update dnf cache
      dnf:
        update_cache: yes

    - name: Install prerequisite packages
      dnf:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add Dockerâ€™s official GPG key
      rpm_key:
        state: present
        key: https://download.docker.com/linux/ubuntu/gpg

    - name: Add Docker repository
      dnf_repository:
        name: docker
        description: Docker CE Stable Repository
        baseurl: https://download.docker.com/linux/centos/docker-ce.repo
        enabled: yes
        gpgcheck: yes
        gpgkey: https://download.docker.com/linux/ubuntu/gpg

    - name: Install Docker packages
      dnf:
        name: "{{ docker_packages }}"
        state: present

    - name: Enable and start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add runner user to Docker group
      user:
        name: runner
        groups: docker
        append: yes

    - name: Install Python Docker SDK
      pip:
        name: docker

    - name: Pull React app Docker image
      community.docker.docker_image:
        name: "{{ lookup('env', 'DOCKERHUB_USERNAME') }}/react-app"
        source: pull
        tag: latest

    - name: Run React app container
      community.docker.docker_container:
        name: react-app
        image: "{{ lookup('env', 'DOCKERHUB_USERNAME') }}/react-app:latest"
        state: started
        restart_policy: always
        ports:
          - "81:80"

    - name: Install NGINX
      dnf:
        name: nginx
        state: present

    - name: Overwrite NGINX index.html
      copy:
        content: "<html><body><h1>Hello from GitHub Actions + Ansible!!</h1></body></html>"
        dest: /var/www/html/index.html

    - name: Start and enable NGINX service
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Allow HTTP & port 81 traffic
      firewalld:
        service: "{{ item }}"
        permanent: yes
        state: enabled
      loop:
        - http
        - port: 81/tcp
      when: ansible_facts['distribution'] == "Amazon Linux"
